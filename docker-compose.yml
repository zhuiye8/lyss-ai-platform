version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15
    container_name: lyss-postgres
    environment:
      POSTGRES_DB: lyss_platform
      POSTGRES_USER: lyss_user
      POSTGRES_PASSWORD: lyss_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - lyss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lyss_user -d lyss_platform"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: lyss-redis
    command: redis-server --appendonly yes --requirepass lyss_redis_password
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - lyss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Services
  api-gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: api-gateway
    container_name: lyss-api-gateway
    environment:
      - ENVIRONMENT=development
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=lyss_user
      - DB_PASSWORD=lyss_password
      - DB_DATABASE=lyss_platform
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=lyss_redis_password
      - EINO_HOST=eino-service
      - EINO_PORT=8080
      - MEMORY_HOST=memory-service
      - MEMORY_PORT=8001
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lyss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  eino-service:
    build:
      context: ./eino-service
      dockerfile: Dockerfile
    container_name: lyss-eino-service
    environment:
      - ENVIRONMENT=development
      - SERVER_PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=lyss_user
      - DB_PASSWORD=lyss_password
      - DB_NAME=lyss_platform
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=lyss_redis_password
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=info
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lyss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  memory-service:
    build:
      context: ./memory-service
      dockerfile: Dockerfile
    container_name: lyss-memory-service
    environment:
      - ENVIRONMENT=development
      - SECRET_KEY=your-super-secret-key-change-this-in-production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=lyss_redis_password
      - REDIS_DB=1
      - VECTOR_DB_PROVIDER=redis
      - EMBEDDING_PROVIDER=sentence-transformers
      - EMBEDDING_MODEL=all-MiniLM-L6-v2
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=info
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - lyss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lyss-frontend
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - lyss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: lyss-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - lyss-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: lyss-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - lyss-network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: lyss-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger HTTP collector
    networks:
      - lyss-network
    restart: unless-stopped

  # Optional: Vector Database (Qdrant)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: lyss-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - lyss-network
    restart: unless-stopped
    profiles:
      - qdrant

  # Optional: Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: lyss-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - lyss-network
    restart: unless-stopped
    profiles:
      - elk

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: lyss-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - lyss-network
    restart: unless-stopped
    profiles:
      - elk

networks:
  lyss-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  qdrant_data:
  elasticsearch_data: